{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _regeneratorRuntime from \"/home/runner/work/ts5-channel-image-generator/ts5-channel-image-generator/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/runner/work/ts5-channel-image-generator/ts5-channel-image-generator/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport React, { useContext, useEffect, useState } from 'react';\nimport Step from \"./step\";\nimport { ImageManipulationContext } from \"./imageManipulation\";\nimport { Button, Code, FormGroup, InputGroup, ProgressBar } from \"@blueprintjs/core\";\nimport * as JSZip from \"jszip\";\nimport { saveAs } from \"file-saver\";\n\nvar Export = function Export() {\n  var _useContext = useContext(ImageManipulationContext),\n      exportStatus = _useContext.exportStatus,\n      results = _useContext.results,\n      inputFile = _useContext.inputFile;\n\n  var _useState = useState(''),\n      fileNamePrefix = _useState[0],\n      setFileNamePrefix = _useState[1];\n\n  var _useState2 = useState(null),\n      exportProgress = _useState2[0],\n      setExportProgress = _useState2[1];\n\n  var _useState3 = useState(null),\n      exportTimeDelta = _useState3[0],\n      setExportTimeDelta = _useState3[1];\n\n  var isGeneratingPreview = exportStatus.end == null || exportStatus.start == null;\n  var isExporting = exportProgress != null && exportProgress !== 1;\n  var previewTimeDeltaStr = exportStatus.delta == null ? 'N/A' : \"\".concat(exportStatus.delta, \"ms\");\n  var exportTimeDeltaStr = exportTimeDelta == null ? 'N/A' : \"\".concat(exportTimeDelta, \"ms\");\n  var disabled = inputFile.data == null;\n  useEffect(function () {\n    setExportProgress(null);\n  }, [results]);\n\n  var exportToZip = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var start, zip, filesTxt, imagesFolder, blob;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              start = Date.now();\n              setExportProgress(0.1);\n              zip = new JSZip();\n              filesTxt = '';\n              imagesFolder = zip.folder(\"images\");\n              results.forEach(function (result, i) {\n                var base64Data = result.replace(/^data:image\\/(png|jpg);base64,/, \"\");\n                var fileName = \"\".concat(fileNamePrefix).concat(fileNamePrefix.length > 0 ? '_' : '').concat(i, \".png\");\n                imagesFolder.file(fileName, base64Data, {\n                  base64: true\n                });\n                filesTxt += \"\".concat(fileName, \"\\n\");\n              });\n              setExportProgress(0.5);\n              zip.file(\"files.txt\", filesTxt);\n              _context.next = 10;\n              return zip.generateAsync({\n                type: \"blob\"\n              });\n\n            case 10:\n              blob = _context.sent;\n              setExportProgress(0.8);\n              saveAs(blob, \"ts5_channel_banner_\".concat(inputFile.name, \".zip\"));\n              setExportProgress(1);\n              setExportTimeDelta(Date.now() - start);\n\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function exportToZip() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return /*#__PURE__*/_jsxs(Step, {\n    number: 3,\n    children: [/*#__PURE__*/_jsx(FormGroup, {\n      label: \"Generating preview\",\n      labelInfo: \"(Status of preview you see on the right)\",\n      helperText: /*#__PURE__*/_jsxs(_Fragment, {\n        children: [\"Last preview render time: \", /*#__PURE__*/_jsx(\"b\", {\n          children: previewTimeDeltaStr\n        })]\n      }),\n      disabled: disabled,\n      children: /*#__PURE__*/_jsx(ProgressBar, {\n        value: disabled ? 0 : !isGeneratingPreview,\n        animate: isGeneratingPreview,\n        disabled: disabled\n      })\n    }), /*#__PURE__*/_jsx(FormGroup, {\n      label: \"Exporting to ZIP file\",\n      labelInfo: \"(Status of rendering final images and creating ZIP file)\",\n      helperText: /*#__PURE__*/_jsxs(_Fragment, {\n        children: [\"Last export time: \", /*#__PURE__*/_jsx(\"b\", {\n          children: exportTimeDeltaStr\n        })]\n      }),\n      disabled: disabled,\n      children: /*#__PURE__*/_jsx(ProgressBar, {\n        value: exportProgress == null ? 0 : exportProgress,\n        animate: isExporting,\n        intent: exportProgress === 1 ? \"success\" : \"primary\",\n        disabled: disabled\n      })\n    }), /*#__PURE__*/_jsx(FormGroup, {\n      label: \"Image file prefix\",\n      labelInfo: \"(optional)\",\n      helperText: /*#__PURE__*/_jsxs(_Fragment, {\n        children: [\"(File format will be \", /*#__PURE__*/_jsx(Code, {\n          children: \"prefix_%d.png\"\n        }), \"). Name of all images will be saved to files.txt file for convenience\"]\n      }),\n      disabled: disabled,\n      children: /*#__PURE__*/_jsx(InputGroup, {\n        large: false,\n        fill: false,\n        onChange: function onChange(e) {\n          setFileNamePrefix(e.target.value);\n        },\n        placeholder: \"File Name Prefix\",\n        value: fileNamePrefix,\n        disabled: disabled\n      })\n    }), /*#__PURE__*/_jsx(Button, {\n      intent: \"primary\",\n      large: true,\n      onClick: exportToZip,\n      loading: isExporting,\n      disabled: disabled,\n      icon: 'download',\n      children: \"Export and download ZIP file\"\n    })]\n  });\n};\n\nexport default Export;","map":null,"metadata":{},"sourceType":"module"}