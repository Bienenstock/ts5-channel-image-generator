{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useContext, useEffect, useState } from 'react';\nimport Step from \"./step\";\nimport { ImageManipulationContext } from \"./imageManipulation\";\nimport { Button, Code, FormGroup, InputGroup, ProgressBar } from \"@blueprintjs/core\";\nimport * as JSZip from \"jszip\";\nimport { saveAs } from \"file-saver\";\n\nconst Export = () => {\n  const {\n    exportStatus,\n    results,\n    inputFile\n  } = useContext(ImageManipulationContext);\n  const {\n    0: fileNamePrefix,\n    1: setFileNamePrefix\n  } = useState('');\n  const {\n    0: exportProgress,\n    1: setExportProgress\n  } = useState(null);\n  const {\n    0: exportTimeDelta,\n    1: setExportTimeDelta\n  } = useState(null);\n  const isGeneratingPreview = exportStatus.end == null || exportStatus.start == null;\n  const isExporting = exportProgress != null && exportProgress !== 1;\n  const previewTimeDeltaStr = exportStatus.delta == null ? 'N/A' : `${exportStatus.delta}ms`;\n  const exportTimeDeltaStr = exportTimeDelta == null ? 'N/A' : `${exportTimeDelta}ms`;\n  const disabled = inputFile.data == null;\n  useEffect(() => {\n    setExportProgress(null);\n  }, [results]);\n\n  const exportToZip = async () => {\n    const start = Date.now();\n    setExportProgress(0.1);\n    const zip = new JSZip();\n    let filesTxt = '';\n    const imagesFolder = zip.folder(\"images\");\n    results.forEach((result, i) => {\n      const base64Data = result.replace(/^data:image\\/(png|jpg);base64,/, \"\");\n      const fileName = `${fileNamePrefix}${fileNamePrefix.length > 0 ? '_' : ''}${i}.png`;\n      imagesFolder.file(fileName, base64Data, {\n        base64: true\n      });\n      filesTxt += `${fileName}\\n`;\n    });\n    setExportProgress(0.5);\n    zip.file(\"files.txt\", filesTxt);\n    const blob = await zip.generateAsync({\n      type: \"blob\"\n    });\n    setExportProgress(0.8);\n    saveAs(blob, `ts5_channel_banner_${inputFile.name}.zip`);\n    setExportProgress(1);\n    setExportTimeDelta(Date.now() - start);\n  };\n\n  return /*#__PURE__*/_jsxs(Step, {\n    number: 3,\n    children: [/*#__PURE__*/_jsx(FormGroup, {\n      label: \"Generating preview\",\n      labelInfo: \"(Status of preview you see on the right)\",\n      helperText: /*#__PURE__*/_jsxs(_Fragment, {\n        children: [\"Last preview render time: \", /*#__PURE__*/_jsx(\"b\", {\n          children: previewTimeDeltaStr\n        })]\n      }),\n      disabled: disabled,\n      children: /*#__PURE__*/_jsx(ProgressBar, {\n        value: disabled ? 0 : !isGeneratingPreview,\n        animate: isGeneratingPreview,\n        disabled: disabled\n      })\n    }), /*#__PURE__*/_jsx(FormGroup, {\n      label: \"Exporting to ZIP file\",\n      labelInfo: \"(Status of rendering final images and creating ZIP file)\",\n      helperText: /*#__PURE__*/_jsxs(_Fragment, {\n        children: [\"Last export time: \", /*#__PURE__*/_jsx(\"b\", {\n          children: exportTimeDeltaStr\n        })]\n      }),\n      disabled: disabled,\n      children: /*#__PURE__*/_jsx(ProgressBar, {\n        value: exportProgress == null ? 0 : exportProgress,\n        animate: isExporting,\n        intent: exportProgress === 1 ? \"success\" : \"primary\",\n        disabled: disabled\n      })\n    }), /*#__PURE__*/_jsx(FormGroup, {\n      label: \"Image file prefix\",\n      labelInfo: \"(optional)\",\n      helperText: /*#__PURE__*/_jsxs(_Fragment, {\n        children: [\"(File format will be \", /*#__PURE__*/_jsx(Code, {\n          children: \"prefix_%d.png\"\n        }), \"). Name of all images will be saved to files.txt file for convenience\"]\n      }),\n      disabled: disabled,\n      children: /*#__PURE__*/_jsx(InputGroup, {\n        large: false,\n        fill: false,\n        onChange: e => {\n          setFileNamePrefix(e.target.value);\n        },\n        placeholder: \"File Name Prefix\",\n        value: fileNamePrefix,\n        disabled: disabled\n      })\n    }), /*#__PURE__*/_jsx(Button, {\n      intent: \"primary\",\n      large: true,\n      onClick: exportToZip,\n      loading: isExporting,\n      disabled: disabled,\n      icon: 'download',\n      children: \"Export and download ZIP file\"\n    })]\n  });\n};\n\nexport default Export;","map":null,"metadata":{},"sourceType":"module"}