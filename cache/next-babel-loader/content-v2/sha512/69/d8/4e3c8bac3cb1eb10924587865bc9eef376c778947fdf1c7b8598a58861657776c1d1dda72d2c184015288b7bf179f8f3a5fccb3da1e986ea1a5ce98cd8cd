{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useContext, useEffect } from 'react';\nimport Step from \"./step\";\nimport { CHANNEL_BANNER_HEIGHT, CHANNEL_HEIGHT, getSlicesCount, ImageManipulationContext } from \"./imageManipulation\";\nimport { FormGroup, Slider, Switch } from \"@blueprintjs/core\";\nimport styled from 'styled-components';\nconst OptionsStep = styled(Step).withConfig({\n  displayName: \"options__OptionsStep\",\n  componentId: \"sc-1izrldg-0\"\n})([\"display:flex;flex-direction:row;justify-content:space-between;flex-wrap:wrap;\"]);\nconst Col = styled.div.withConfig({\n  displayName: \"options__Col\",\n  componentId: \"sc-1izrldg-1\"\n})([\"display:flex;flex-direction:column;width:48%;min-width:300px;\"]);\n\nconst Options = () => {\n  const {\n    options,\n    setOptions,\n    inputFile\n  } = useContext(ImageManipulationContext);\n  const channelHeight = options.ignoreSpacing ? CHANNEL_HEIGHT : CHANNEL_BANNER_HEIGHT;\n  const maxChannels = getSlicesCount(inputFile.width, inputFile.height, channelHeight);\n  const maxVerticalOffset = inputFile.height - options.slices * channelHeight;\n  const disabled = inputFile.data == null;\n  useEffect(() => {\n    if (options.slices > maxChannels) {\n      setOption('slices', maxChannels);\n    }\n\n    if (options.yOffset > maxVerticalOffset) {\n      setOption('yOffset', Math.min(options.yOffset, maxVerticalOffset));\n    }\n  }, [options.slices, options.ignoreSpacing, maxChannels]);\n\n  const setOption = (optionName, value) => setOptions(opt => _objectSpread(_objectSpread({}, opt), {}, {\n    [optionName]: value\n  }));\n\n  return /*#__PURE__*/_jsxs(OptionsStep, {\n    number: 2,\n    children: [/*#__PURE__*/_jsxs(Col, {\n      children: [/*#__PURE__*/_jsx(FormGroup, {\n        label: \"Channels\",\n        labelInfo: \"(Number of output images)\",\n        helperText: \"Number of channels you want the banner to be displayed over\",\n        disabled: disabled,\n        children: /*#__PURE__*/_jsx(Slider, {\n          min: 0,\n          max: maxChannels,\n          stepSize: 1,\n          labelStepSize: maxChannels / 10,\n          onChange: value => setOption('slices', value),\n          value: options.slices,\n          disabled: disabled\n        })\n      }), /*#__PURE__*/_jsx(FormGroup, {\n        label: \"Vertical offset\",\n        labelInfo: \"(Moves image up and down)\",\n        helperText: \"Chose position of the image. You can get more freedom by setting lower number of channels\",\n        disabled: disabled,\n        children: /*#__PURE__*/_jsx(Slider, {\n          min: 0,\n          max: maxVerticalOffset,\n          stepSize: 1,\n          labelStepSize: ~~(inputFile.height / 10),\n          onChange: value => setOption('yOffset', value),\n          value: options.yOffset,\n          disabled: disabled\n        })\n      })]\n    }), /*#__PURE__*/_jsx(Col, {\n      children: /*#__PURE__*/_jsx(FormGroup, {\n        label: \"Ignore channels spacing\",\n        labelInfo: \"(Space between channels)\",\n        helperText: \"If checked image will be vertically stretch but all parts of it will be visible\",\n        disabled: disabled,\n        children: /*#__PURE__*/_jsx(Switch, {\n          checked: options.ignoreSpacing,\n          label: \"Ignore spacing\",\n          onChange: value => {\n            setOption('ignoreSpacing', !options.ignoreSpacing);\n          },\n          disabled: disabled,\n          large: true\n        })\n      })\n    })]\n  });\n};\n\nexport default Options;","map":null,"metadata":{},"sourceType":"module"}