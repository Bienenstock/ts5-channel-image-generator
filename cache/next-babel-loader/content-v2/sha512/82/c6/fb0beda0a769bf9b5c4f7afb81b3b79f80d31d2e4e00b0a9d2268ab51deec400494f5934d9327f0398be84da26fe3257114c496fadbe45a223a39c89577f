{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useContext, useState } from 'react';\nimport Step from \"./step\";\nimport { Button, Callout, Code, FileInput, FormGroup, Icon, InputGroup } from \"@blueprintjs/core\";\nimport styled from 'styled-components';\nimport { CHANNEL_BANNER_WIDTH, ImageManipulationContext } from \"./imageManipulation\";\nimport { toaster } from \"../pages\";\nconst ImagePreview = styled.img.withConfig({\n  displayName: \"upload__ImagePreview\",\n  componentId: \"sc-5z3br1-0\"\n})([\"width:300px;object-fit:contain;border:1px solid rgb(255 255 255 / 20%);\"]);\nconst ImagePreviewPlaceholder = styled.div.withConfig({\n  displayName: \"upload__ImagePreviewPlaceholder\",\n  componentId: \"sc-5z3br1-1\"\n})([\"height:250px;width:300px;display:flex;justify-content:center;align-items:center;background:rgb(0 0 0 / 20%);border:1px solid rgb(255 255 255 / 20%);border-radius:5px;\"]);\nconst UploadStep = styled(Step).withConfig({\n  displayName: \"upload__UploadStep\",\n  componentId: \"sc-5z3br1-2\"\n})([\"display:flex;justify-content:space-between;flex-wrap:wrap;align-items:flex-start;\"]);\nconst Col = styled.div.withConfig({\n  displayName: \"upload__Col\",\n  componentId: \"sc-5z3br1-3\"\n})([\"display:flex;flex-direction:row;flex-wrap:wrap;width:\", \";min-width:330px;\"], props => {\n  var _props$$width;\n\n  return (_props$$width = props.$width) !== null && _props$$width !== void 0 ? _props$$width : 30;\n});\nconst FileSupportCallout = styled(Callout).withConfig({\n  displayName: \"upload__FileSupportCallout\",\n  componentId: \"sc-5z3br1-4\"\n})([\"min-width:100%;margin-bottom:2rem;\"]);\nconst LoadButton = styled(Button).withConfig({\n  displayName: \"upload__LoadButton\",\n  componentId: \"sc-5z3br1-5\"\n})([\"width:85px;\"]);\n\nconst Upload = () => {\n  var _inputFile$name;\n\n  const {\n    inputFile,\n    setInputFile\n  } = useContext(ImageManipulationContext);\n  const {\n    0: loadUrl,\n    1: setLoadUrl\n  } = useState(\"\");\n  const {\n    0: isUrlLoading,\n    1: setIsUrlLoading\n  } = useState(false);\n\n  const fileToDataURL = file => {\n    return new Promise(resolve => {\n      const reader = new FileReader();\n\n      reader.onload = e => {\n        resolve(e.target.result);\n      };\n\n      reader.readAsDataURL(file);\n    });\n  };\n\n  const resizeImageFromDataURL = async (url, metadata) => {\n    return new Promise(resolve => {\n      const canvas = document.createElement('canvas');\n      const ctx = canvas.getContext('2d');\n      canvas.width = 500;\n      canvas.height = metadata.height * (CHANNEL_BANNER_WIDTH / metadata.width);\n      console.log('height', metadata.width, metadata.height, canvas.width, canvas.height);\n      const img = new Image();\n      img.crossOrigin = \"Anonymous\";\n\n      img.onload = () => {\n        ctx.drawImage(img, 0, 0, metadata.width, metadata.height, 0, 0, canvas.width, canvas.height);\n        resolve(canvas.toDataURL());\n      };\n\n      img.src = url;\n    });\n  };\n\n  const getImageMetadataFromDataURL = url => {\n    return new Promise((resolve, reject) => {\n      const img = new Image();\n\n      img.onload = () => {\n        resolve({\n          width: img.width,\n          height: img.height\n        });\n      };\n\n      img.onerror = reject;\n      img.src = url;\n    });\n  };\n\n  const uploadHandler = async e => {\n    const file = e.target.files[0];\n    const dataURL = await fileToDataURL(file);\n    const sourceImageMetadata = await getImageMetadataFromDataURL(dataURL);\n    const resizedImageDataURL = await resizeImageFromDataURL(dataURL, sourceImageMetadata);\n    const metadata = await getImageMetadataFromDataURL(resizedImageDataURL);\n    setInputFile({\n      data: resizedImageDataURL,\n      width: metadata.width,\n      height: metadata.height,\n      name: file.name\n    });\n  };\n\n  const loadHandler = async () => {\n    setIsUrlLoading(true);\n    const dataURL = loadUrl;\n\n    try {\n      const sourceImageMetadata = await getImageMetadataFromDataURL(dataURL);\n      const resizedImageDataURL = await resizeImageFromDataURL(dataURL, sourceImageMetadata);\n      const metadata = await getImageMetadataFromDataURL(resizedImageDataURL);\n      setIsUrlLoading(false);\n      setInputFile({\n        data: resizedImageDataURL,\n        width: metadata.width,\n        height: metadata.height,\n        name: \"loaded\"\n      });\n    } catch (e) {\n      setIsUrlLoading(false);\n      toaster.show({\n        intent: \"danger\",\n        message: \"Failed to load image from URL\",\n        icon: \"error\"\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxs(UploadStep, {\n    number: 1,\n    children: [/*#__PURE__*/_jsxs(Col, {\n      $width: 'calc(100% - 350px)',\n      children: [/*#__PURE__*/_jsxs(FileSupportCallout, {\n        intent: \"primary\",\n        title: \"Supported image formats\",\n        children: [\"Image formats that are supported depends on your browser but in general all modern image formats should work fine. Animated banners are not yet supported and they will be converted to static one. Output images are in resolution \", /*#__PURE__*/_jsx(Code, {\n          children: \"500x22\"\n        }), \" pixels so optimal size for the input image is width \", /*#__PURE__*/_jsx(Code, {\n          children: \"500px\"\n        }), \" and height that can be divided evenly.\"]\n      }), /*#__PURE__*/_jsx(Col, {\n        $width: '50%',\n        children: /*#__PURE__*/_jsx(FormGroup, {\n          label: \"Image File\",\n          helperText: /*#__PURE__*/_jsxs(_Fragment, {\n            children: [\"Upload image that you would like to convert into room banners.\", /*#__PURE__*/_jsx(\"br\", {}), \"Images are not uploaded to the server and all processing is done in the browser.\"]\n          }),\n          labelFor: \"file-input\",\n          labelInfo: \"(Upload from your computer)\",\n          children: /*#__PURE__*/_jsx(FileInput, {\n            style: {\n              width: 330\n            },\n            fill: true,\n            inputProps: {\n              accept: 'image/*'\n            },\n            id: 'file-input',\n            text: (_inputFile$name = inputFile.name) !== null && _inputFile$name !== void 0 ? _inputFile$name : 'Choose file...',\n            onInputChange: uploadHandler,\n            large: true\n          })\n        })\n      }), /*#__PURE__*/_jsx(Col, {\n        $width: '50%',\n        children: /*#__PURE__*/_jsx(FormGroup, {\n          label: \"Image URL\",\n          helperText: \"Load image from public URL\",\n          labelFor: \"file-url\",\n          labelInfo: \"(Load from the internet)\",\n          children: /*#__PURE__*/_jsx(InputGroup, {\n            style: {\n              width: 330\n            },\n            large: true,\n            fill: true,\n            onChange: e => {\n              setLoadUrl(e.target.value);\n            },\n            placeholder: \"Image URL...\",\n            rightElement: /*#__PURE__*/_jsx(LoadButton, {\n              loading: isUrlLoading,\n              large: true,\n              onClick: loadHandler,\n              children: \"Load\"\n            }),\n            value: loadUrl\n          })\n        })\n      })]\n    }), /*#__PURE__*/_jsx(Col, {\n      $width: '250px',\n      style: {\n        justifyContent: 'flex-end'\n      },\n      children: inputFile.data ? /*#__PURE__*/_jsx(ImagePreview, {\n        src: inputFile.data,\n        alt: \"Image Preview\"\n      }) : /*#__PURE__*/_jsx(ImagePreviewPlaceholder, {\n        children: /*#__PURE__*/_jsx(Icon, {\n          icon: \"media\",\n          iconSize: 50\n        })\n      })\n    })]\n  });\n};\n\nexport default Upload;","map":null,"metadata":{},"sourceType":"module"}