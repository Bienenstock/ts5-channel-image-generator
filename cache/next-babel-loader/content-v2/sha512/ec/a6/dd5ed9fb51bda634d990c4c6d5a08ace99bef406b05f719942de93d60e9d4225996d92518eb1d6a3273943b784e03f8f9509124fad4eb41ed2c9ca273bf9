{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _regeneratorRuntime from \"/home/runner/work/ts5-channel-image-generator/ts5-channel-image-generator/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/runner/work/ts5-channel-image-generator/ts5-channel-image-generator/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport React, { useContext, useState } from 'react';\nimport Step from \"./step\";\nimport { Button, Callout, Code, FileInput, FormGroup, Icon, InputGroup } from \"@blueprintjs/core\";\nimport styled from 'styled-components';\nimport { CHANNEL_BANNER_WIDTH, ImageManipulationContext } from \"./imageManipulation\";\nimport { toaster } from \"../pages\";\nvar ImagePreview = styled.img.withConfig({\n  displayName: \"upload__ImagePreview\",\n  componentId: \"sc-5z3br1-0\"\n})([\"width:300px;object-fit:contain;border:1px solid rgb(255 255 255 / 20%);\"]);\nvar ImagePreviewPlaceholder = styled.div.withConfig({\n  displayName: \"upload__ImagePreviewPlaceholder\",\n  componentId: \"sc-5z3br1-1\"\n})([\"height:250px;width:300px;display:flex;justify-content:center;align-items:center;background:rgb(0 0 0 / 20%);border:1px solid rgb(255 255 255 / 20%);border-radius:5px;\"]);\nvar UploadStep = styled(Step).withConfig({\n  displayName: \"upload__UploadStep\",\n  componentId: \"sc-5z3br1-2\"\n})([\"display:flex;justify-content:space-between;flex-wrap:wrap;align-items:flex-start;\"]);\nvar Col = styled.div.withConfig({\n  displayName: \"upload__Col\",\n  componentId: \"sc-5z3br1-3\"\n})([\"display:flex;flex-direction:row;flex-wrap:wrap;width:\", \";min-width:330px;\"], function (props) {\n  var _props$$width;\n\n  return (_props$$width = props.$width) !== null && _props$$width !== void 0 ? _props$$width : 30;\n});\nvar FileSupportCallout = styled(Callout).withConfig({\n  displayName: \"upload__FileSupportCallout\",\n  componentId: \"sc-5z3br1-4\"\n})([\"min-width:100%;margin-bottom:2rem;\"]);\nvar LoadButton = styled(Button).withConfig({\n  displayName: \"upload__LoadButton\",\n  componentId: \"sc-5z3br1-5\"\n})([\"width:85px;\"]);\n\nvar Upload = function Upload() {\n  var _inputFile$name;\n\n  var _useContext = useContext(ImageManipulationContext),\n      inputFile = _useContext.inputFile,\n      setInputFile = _useContext.setInputFile;\n\n  var _useState = useState(\"\"),\n      loadUrl = _useState[0],\n      setLoadUrl = _useState[1];\n\n  var _useState2 = useState(false),\n      isUrlLoading = _useState2[0],\n      setIsUrlLoading = _useState2[1];\n\n  var fileToDataURL = function fileToDataURL(file) {\n    return new Promise(function (resolve) {\n      var reader = new FileReader();\n\n      reader.onload = function (e) {\n        resolve(e.target.result);\n      };\n\n      reader.readAsDataURL(file);\n    });\n  };\n\n  var resizeImageFromDataURL = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(url, metadata) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              return _context.abrupt(\"return\", new Promise(function (resolve) {\n                var canvas = document.createElement('canvas');\n                var ctx = canvas.getContext('2d');\n                canvas.width = 500;\n                canvas.height = metadata.height * (CHANNEL_BANNER_WIDTH / metadata.width);\n                console.log('height', metadata.width, metadata.height, canvas.width, canvas.height);\n                var img = new Image();\n                img.crossOrigin = \"Anonymous\";\n\n                img.onload = function () {\n                  ctx.drawImage(img, 0, 0, metadata.width, metadata.height, 0, 0, canvas.width, canvas.height);\n                  resolve(canvas.toDataURL());\n                };\n\n                img.src = url;\n              }));\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function resizeImageFromDataURL(_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var getImageMetadataFromDataURL = function getImageMetadataFromDataURL(url) {\n    return new Promise(function (resolve, reject) {\n      var img = new Image();\n\n      img.onload = function () {\n        resolve({\n          width: img.width,\n          height: img.height\n        });\n      };\n\n      img.onerror = reject;\n      img.src = url;\n    });\n  };\n\n  var uploadHandler = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(e) {\n      var file, dataURL, sourceImageMetadata, resizedImageDataURL, metadata;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              file = e.target.files[0];\n              _context2.next = 3;\n              return fileToDataURL(file);\n\n            case 3:\n              dataURL = _context2.sent;\n              _context2.next = 6;\n              return getImageMetadataFromDataURL(dataURL);\n\n            case 6:\n              sourceImageMetadata = _context2.sent;\n              _context2.next = 9;\n              return resizeImageFromDataURL(dataURL, sourceImageMetadata);\n\n            case 9:\n              resizedImageDataURL = _context2.sent;\n              _context2.next = 12;\n              return getImageMetadataFromDataURL(resizedImageDataURL);\n\n            case 12:\n              metadata = _context2.sent;\n              setInputFile({\n                data: resizedImageDataURL,\n                width: metadata.width,\n                height: metadata.height,\n                name: file.name\n              });\n\n            case 14:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function uploadHandler(_x3) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var loadHandler = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      var dataURL, sourceImageMetadata, resizedImageDataURL, metadata;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              setIsUrlLoading(true);\n              dataURL = loadUrl;\n              _context3.prev = 2;\n              _context3.next = 5;\n              return getImageMetadataFromDataURL(dataURL);\n\n            case 5:\n              sourceImageMetadata = _context3.sent;\n              _context3.next = 8;\n              return resizeImageFromDataURL(dataURL, sourceImageMetadata);\n\n            case 8:\n              resizedImageDataURL = _context3.sent;\n              _context3.next = 11;\n              return getImageMetadataFromDataURL(resizedImageDataURL);\n\n            case 11:\n              metadata = _context3.sent;\n              setIsUrlLoading(false);\n              setInputFile({\n                data: resizedImageDataURL,\n                width: metadata.width,\n                height: metadata.height,\n                name: \"loaded\"\n              });\n              _context3.next = 20;\n              break;\n\n            case 16:\n              _context3.prev = 16;\n              _context3.t0 = _context3[\"catch\"](2);\n              setIsUrlLoading(false);\n              toaster.show({\n                intent: \"danger\",\n                message: \"Failed to load image from URL\",\n                icon: \"error\"\n              });\n\n            case 20:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, null, [[2, 16]]);\n    }));\n\n    return function loadHandler() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  return /*#__PURE__*/_jsxs(UploadStep, {\n    number: 1,\n    children: [/*#__PURE__*/_jsxs(Col, {\n      $width: 'calc(100% - 350px)',\n      children: [/*#__PURE__*/_jsxs(FileSupportCallout, {\n        intent: \"primary\",\n        title: \"Supported image formats\",\n        children: [\"Image formats that are supported depends on your browser but in general all modern image formats should work fine. Animated banners are not yet supported and they will be converted to static one. Output images are in resolution \", /*#__PURE__*/_jsx(Code, {\n          children: \"500x22\"\n        }), \" pixels so optimal size for the input image is width \", /*#__PURE__*/_jsx(Code, {\n          children: \"500px\"\n        }), \" and height that can be divided evenly.\"]\n      }), /*#__PURE__*/_jsx(Col, {\n        $width: '50%',\n        children: /*#__PURE__*/_jsx(FormGroup, {\n          label: \"Image File\",\n          helperText: /*#__PURE__*/_jsxs(_Fragment, {\n            children: [\"Upload image that you would like to convert into room banners.\", /*#__PURE__*/_jsx(\"br\", {}), \"Images are not uploaded to the server and all processing is done in the browser.\"]\n          }),\n          labelFor: \"file-input\",\n          labelInfo: \"(Upload from your computer)\",\n          children: /*#__PURE__*/_jsx(FileInput, {\n            style: {\n              width: 330\n            },\n            fill: true,\n            inputProps: {\n              accept: 'image/*'\n            },\n            id: 'file-input',\n            text: (_inputFile$name = inputFile.name) !== null && _inputFile$name !== void 0 ? _inputFile$name : 'Choose file...',\n            onInputChange: uploadHandler,\n            large: true\n          })\n        })\n      }), /*#__PURE__*/_jsx(Col, {\n        $width: '50%',\n        children: /*#__PURE__*/_jsx(FormGroup, {\n          label: \"Image URL\",\n          helperText: \"Load image from public URL\",\n          labelFor: \"file-url\",\n          labelInfo: \"(Load from the internet)\",\n          children: /*#__PURE__*/_jsx(InputGroup, {\n            style: {\n              width: 330\n            },\n            large: true,\n            fill: true,\n            onChange: function onChange(e) {\n              setLoadUrl(e.target.value);\n            },\n            placeholder: \"Image URL...\",\n            rightElement: /*#__PURE__*/_jsx(LoadButton, {\n              loading: isUrlLoading,\n              large: true,\n              onClick: loadHandler,\n              children: \"Load\"\n            }),\n            value: loadUrl\n          })\n        })\n      })]\n    }), /*#__PURE__*/_jsx(Col, {\n      $width: '250px',\n      style: {\n        justifyContent: 'flex-end'\n      },\n      children: inputFile.data ? /*#__PURE__*/_jsx(ImagePreview, {\n        src: inputFile.data,\n        alt: \"Image Preview\"\n      }) : /*#__PURE__*/_jsx(ImagePreviewPlaceholder, {\n        children: /*#__PURE__*/_jsx(Icon, {\n          icon: \"media\",\n          iconSize: 50\n        })\n      })\n    })]\n  });\n};\n\nexport default Upload;","map":null,"metadata":{},"sourceType":"module"}